package 자바함수공부.N8_함수형스타일프로그래밍의기초와디자인패턴.N167_람다요약;

public class 람다함수기초 {
    /*
    * 람다 함수란?
    * 프로그래밍 언어에서 사용되는 개념으로
    * '익명 함수'를 지칭하는 용어
    * 수학에서 사용하는 함수를 보다 단순하게 표현하는 법(간단히 함수를 변수처럼 사용)
    * Java 8부터 기능이 포함됨
    *
    * 람다의 특징
    * 1. 이름이 필요 없음 - 익명 함수 : 파라미터가 있는 함수는 괄호 안에 지정하여 사용
    *
    * 람다식의 장점
    * 1. 코드의 라인 수가 줄어듬 : 메소드로 표현된 코드에 비해 확연히 라인 수가 줄어듬
    * 2. 병렬 프로그래밍이 가능(?) : iteration 방식은 반복 대상을 일일히 루프에서 지정하는
    * 반면에, 함수형 프로그래밍에서는 반복 대상을 사용자 코드에서 직접 지정하지 않음
    * * 쓰레드 : 코드를 실행해주는 엘리먼트, 일반적으로 순차적으로 프로그래밍 됨.
    * 병렬 프로그래밍 방식에는, 동시에 실행됨.
    * 3. 람다식으로 바로 실행문을 전달할 수 있음
    * 4. 의도의 명확성 : 가독성이 높음
    *
    * 람다식의 단점
    * 1. 람다식은 재사용이 불가능하다 : 일회용 함수 정의가 목적
    * 2. 불필요하게 너무 사용하게 되면 가독성이 떨어짐
    *
    * 람다식의 표현방법
    *
    * (매개변수) -> {함수 구현부} / () -> {함수 구현}
    *
    * 람다식은 화살표(->)를 사용
    * 매개변수가 하나일 경우 매개변수 생략 가능
    * 작성할 실행문이 단일일 경우 괄호({}) 생략 가능
    * 단 return식의 단일 실행문의 경우 괄호 생략 불가.
    *
    * */

}
